#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <1 12 23>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <8 17 26>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 13>;
        };

        hold_space {
            bindings = <&kp SPACE>;
            key-positions = <23 31>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        toggle_nav {
            bindings = <&tog 2>;
            key-positions = <11 2 13>;
            layers = <0 2>;
            require-prior-idle-ms = <350>;
        };

        jsdoc {
            bindings = <&jsdoc>;
            key-positions = <29 28>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 12 16 17>;
        };

        screen_shot {
            bindings = <&kp LS(LG(N5))>;
            key-positions = <0 11>;
        };

        soft_off {
            bindings = <&soft_off>;
            key-positions = <0 32 9 31>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <4 14 5 15>;
        };

        bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 29 28 22 27>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <30 31 32 33 34 35>;
        };

        globe {
            bindings = <&kp GLOBE>;
            key-positions = <21 20>;
        };

        toggle_win {
            bindings = <&tog 1>;
            key-positions = <0 9>;
        };

        screenshot_win {
            bindings = <&kp LS(LG(S))>;
            key-positions = <0 11>;
            layers = <1>;
        };

        force_quit_mac {
            bindings = <&kp LA(LG(ESCAPE))>;
            key-positions = <0 1 2>;
        };

        mo_6_left {
            bindings = <&mo 6>;
            key-positions = <30 31>;
        };

        mo_6_right {
            bindings = <&mo 6>;
            key-positions = <32 33>;
        };

        studio_unlock {
            bindings = <&studio_unlock>;
            key-positions = <20 21 28 29>;
        };
    };

    behaviors {
        hml: HOMEROW_L_MODS {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_L_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 32>;
            hold-while-undecided;
        };

        hsl: HOMEROW_L_SHIFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_L_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <5 15 25 6 16 26 7 8 9 9 17 18 19 27 28 29 33>;
            hold-while-undecided;
        };

        esc: esc {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESC>;

            tapping-term-ms = <200>;
        };

        tab: tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ENTER>, <&kp TAB>;

            tapping-term-ms = <250>;
        };

        hmr: HOMEROW_R_MODS {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_R_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-while-undecided;
        };

        hsr: HOMEROW_R_SHIFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_R_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30>;
            hold-while-undecided;
        };

        cma_scln: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "CMA_SCLN";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        prd_cln: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "PRD_CLN";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        jsdoc: jsdoc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR &kp STAR &kp SPACE>;
            label = "JSDOC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q         &kp W            &kp E            &kp R              &kp T        &kp Y  &kp U            &kp I         &kp O             &kp P
&hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hsl LEFT_SHIFT F  &kp G        &kp H  &hsr RSHFT J     &hmr RGUI K   &hmr RIGHT_ALT L  &hmr RCTRL SQT
&kp Z         &kp X            &kp C            &kp V              &kp B        &kp N  &kp M            &cma_scln     &prd_cln          &kp SLASH
                                                &lt 4 TAB          &lt 2 SPACE         &lt 4 BACKSPACE  &lt 2 DELETE
            >;
        };

        Base_win {
            bindings = <
&trans       &trans  &trans        &trans  &trans  &trans  &trans  &trans        &trans  &trans
&hml LGUI A  &trans  &hml LCTRL D  &trans  &trans  &trans  &trans  &hmr RCTRL K  &trans  &hmr RGUI SQT
&trans       &trans  &trans        &trans  &trans  &trans  &trans  &trans        &trans  &trans
                                   &trans  &trans          &trans  &trans
            >;
        };

        Num+Sym {
            bindings = <
&kp N0                  &kp NUMBER_1            &kp NUMBER_2  &kp NUMBER_3         &kp KP_PLUS      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS           &kp UNDERSCORE   &kp PLUS              &kp TILDE
&hml LCTRL KP_MULTIPLY  &hml LEFT_ALT NUMBER_4  &hml LGUI N5  &hsl LSHFT NUMBER_6  &kp KP_SUBTRACT  &kp LEFT_BRACKET      &hmr RIGHT_SHIFT RIGHT_BRACKET  &hmr RGUI MINUS  &hmr RIGHT_ALT EQUAL  &hmr RCTRL GRAVE
&kp KP_DIVIDE           &kp N7                  &kp N8        &kp N9               &kp KP_DOT       &kp LEFT_BRACE        &kp RIGHT_BRACE                 &kp LESS_THAN    &kp GREATER_THAN      &kp BACKSLASH
                                                              &lt 6 LS(TAB)        &trans                                 &lt 6 LA(DELETE)                &trans
            >;
        };

        Num+Sym_win {
            bindings = <
&trans                 &trans  &trans         &trans  &trans  &trans  &trans  &trans            &trans  &trans
&hml LGUI KP_MULTIPLY  &trans  &hml LCTRL N5  &trans  &trans  &trans  &trans  &hmr RCTRL MINUS  &trans  &hmr RGUI GRAVE
&trans                 &trans  &trans         &trans  &trans  &trans  &trans  &trans            &trans  &trans
                                              &trans  &trans          &trans  &trans
            >;
        };

        Nav+Func {
            bindings = <
&mt LEFT_SHIFT PAGE_UP  &kp HOME   &mt LS(LALT) UP_ARROW  &kp END    &kp LS(LA(LC(BACKSLASH)))  &trans      &kp F9         &kp F10       &kp F11           &kp F12
&mt LALT PAGE_DOWN      &kp LEFT   &kp DOWN               &kp RIGHT  &kp BACKSPACE              &kp DELETE  &hsr RSHFT F5  &hmr RGUI F6  &hmr LEFT_ALT F7  &hmr RCTRL F8
&kp LG(Z)               &kp LG(X)  &kp LG(C)              &kp LG(V)  &kp LS(LG(K))              &trans      &kp F1         &kp F2        &kp F3            &kp F4
                                                          &trans     &lt 6 LA(BACKSPACE)                    &trans         &lt 6 TAB
            >;
        };

        Nav+Func_win {
            bindings = <
&trans               &mt LALT HOME  &trans     &mt LALT END  &trans         &trans  &trans  &trans         &trans  &trans
&mt LCTRL PAGE_DOWN  &trans         &trans     &trans        &trans         &trans  &trans  &hmr RCTRL F6  &trans  &hmr RGUI F8
&kp LC(Z)            &kp LC(X)      &kp LC(C)  &kp LC(V)     &kp LS(LC(K))  &trans  &trans  &trans         &trans  &trans
                                               &trans        &trans                 &trans  &trans
            >;
        };

        Bluetooth {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans       &trans  &trans  &trans  &bt BT_CLR_ALL
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans       &trans  &trans  &trans  &trans
&bt BT_CLR     &trans         &out OUT_TOG   &trans         &sys_reset     &bootloader  &trans  &trans  &trans  &trans
                                             &trans         &trans                      &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num_sym_win {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        nav_func_win {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
