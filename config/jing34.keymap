#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_enter {
            bindings = <&kp ENTER>;
            key-positions = <1 12 23>;
        };

        right_enter {
            bindings = <&kp ENTER>;
            key-positions = <8 17 26>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 13>;
        };

        hold_space {
            bindings = <&kp SPACE>;
            key-positions = <31 23>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        toggle_nav {
            bindings = <&tog 4>;
            key-positions = <11 2 13>;
            layers = <0 4>;
            require-prior-idle-ms = <350>;
        };

        jsdoc {
            bindings = <&jsdoc>;
            key-positions = <29 28>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 12 16 17>;
        };

        screenshot_mac {
            bindings = <&kp LS(LG(N5))>;
            key-positions = <0 11>;
            layers = <0 2>;
        };

        reset {
            bindings = <&sys_reset>;
            key-positions = <0 31 32 9>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <4 14 5 15>;
        };

        bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 29 28 22 27>;
        };

        pw {
            bindings = <&pw>;
            key-positions = <10 1 8 19>;
            layers = <2>;
        };

        toggle_win {
            bindings = <&tog 1>;
            key-positions = <0 9>;
        };

        screenshot_win {
            bindings = <&kp LS(LG(S))>;
            key-positions = <0 11>;
            layers = <1>;
        };
    };

    behaviors {
        hm: HOMEROW_MODS {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
        };

        hs: HOMEROW_SHIFT {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "balanced";
        };

        esc: esc {
            compatible = "zmk,behavior-tap-dance";
            label = "ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESC>;

            tapping-term-ms = <200>;
        };

        tab: tab {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ENTER>, <&kp TAB>;

            tapping-term-ms = <250>;
        };
    };

    macros {
        jsdoc: jsdoc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR &kp STAR &kp SPACE>;
            label = "JSDOC";
        };

        pw: pw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Y) &kp F &kp LS(P) &kp N2 &kp N7 &kp E &kp X &kp AT &kp N4 &kp PRCNT &kp N4 &kp LS(V) &kp LS(E) &kp LS(F) &kp LS(T) &kp ENTER>;
            label = "PW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q        &kp W           &kp E           &kp R             &kp T        &kp Y  &kp U            &kp I         &kp O            &kp P
&hm LCTRL A  &hm LEFT_ALT S  &hm LEFT_GUI D  &hs LEFT_SHIFT F  &kp G        &kp H  &hs RSHFT J      &hm RGUI K    &hm RIGHT_ALT L  &hm RCTRL SQT
&hs LSHFT Z  &kp X           &kp C           &kp V             &kp B        &kp N  &kp M            &kp COMMA     &kp DOT          &hs RSHFT FSLH
                                             &lt 4 TAB         &lt 2 SPACE         &lt 4 BACKSPACE  &lt 2 DELETE
            >;
        };

        Base_win {
            bindings = <
&trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans       &trans  &trans
&hm LGUI A  &trans  &hm LCTRL D  &trans  &trans  &trans  &trans  &hm RCTRL K  &trans  &hm RGUI SQT
&trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans       &trans  &trans
                                 &trans  &trans          &trans  &trans
            >;
        };

        Num+Sym {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4   &kp N5      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &kp UNDERSCORE  &kp PLUS             &kp TILDE
&hm LCTRL N6  &hm LEFT_ALT N7  &hm LGUI N8      &hs LSHFT N9   &kp N0      &kp LEFT_BRACKET      &hm RIGHT_SHIFT RIGHT_BRACKET  &hm RGUI MINUS  &hm RIGHT_ALT EQUAL  &hm RCTRL GRAVE
&kp KP_PLUS   &kp KP_MINUS     &kp KP_MULTIPLY  &kp KP_DIVIDE  &kp KP_DOT  &kp LEFT_BRACE        &kp RIGHT_BRACE                &kp SEMI        &kp COLON            &kp BACKSLASH
                                                &lt 6 LS(TAB)  &trans                            &lt 6 TAB                      &trans
            >;
        };

        Num+Sym_win {
            bindings = <
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans  &trans
&hm LGUI NUMBER_6  &trans  &hm LCTRL N8  &trans  &trans  &trans  &trans  &hm RCTRL MINUS  &trans  &hm RGUI GRAVE
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans  &trans
                                         &trans  &trans          &trans  &trans
            >;
        };

        Nav+Func {
            bindings = <
&mt LEFT_SHIFT PAGE_UP  &kp HOME   &mt LS(LALT) UP_ARROW  &kp END    &kp LS(LA(LC(BACKSLASH)))  &trans      &kp F9        &kp F10      &kp F11          &kp F12
&mt LALT PAGE_DOWN      &kp LEFT   &kp DOWN               &kp RIGHT  &kp BACKSPACE              &kp DELETE  &hs RSHFT F5  &hm RGUI F6  &hm LEFT_ALT F7  &hm RCTRL F8
&kp LG(Z)               &kp LG(X)  &kp LG(C)              &kp LG(V)  &kp LS(LG(K))              &trans      &kp F1        &kp F2       &kp F3           &kp F4
                                                          &trans     &lt 6 LCTRL                            &trans        &lt 6 TAB
            >;
        };

        Nav+Func_win {
            bindings = <
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans  &trans
&hm LGUI NUMBER_6  &trans  &hm LCTRL N8  &trans  &trans  &trans  &trans  &hm RCTRL MINUS  &trans  &hm RGUI GRAVE
&trans             &trans  &trans        &trans  &trans  &trans  &trans  &trans           &trans  &trans
                                         &trans  &trans          &trans  &trans
            >;
        };

        Bluetooth {
            bindings = <
&bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &trans       &trans  &trans  &trans  &bt BT_CLR_ALL
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &trans       &trans  &trans  &trans  &trans
&bt BT_CLR     &trans         &out OUT_TOG   &trans         &sys_reset     &bootloader  &trans  &trans  &trans  &trans
                                             &trans         &trans                      &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num_sym_win {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
